{"version":3,"sources":["App.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","className","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAuFeA,E,kDAjFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAQ,GACRC,KAAM,IALS,E,+CAUnB,SAAYC,EAAKC,GAEfC,KAAKC,SAAL,eACGH,EAAMC,M,qBAGX,WAEE,IAAMH,EAAU,CACdM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,QAAQS,SAItBR,EAAI,YAAOG,KAAKL,MAAME,MAG5BA,EAAKS,KAAKV,GAGVI,KAAKC,SAAS,CACZJ,OACAD,QAAS,O,wBAGb,SAAWM,GAET,IAGMK,EAHI,YAAOP,KAAKL,MAAME,MAGHW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDF,KAAKC,SAAS,CAACJ,KAAMU,M,oBAGvB,WAAU,IAAD,OACP,OACE,qBAAKG,UAAU,MAAf,SACG,8CAEK,uBACA,uBACEC,KAAK,OACLC,YAAY,iBACZb,MAAOC,KAAKL,MAAMC,QAClBiB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOjB,UAEpD,wBACEkB,QAAS,kBAAM,EAAKC,WADtB,iBAKE,uBACA,6BACGlB,KAAKL,MAAME,KAAKsB,KAAI,SAAAV,GACnB,OACE,+BACGA,EAAKV,MACN,wBAAQkB,QAAS,kBAAM,EAAKG,WAAWX,EAAKP,KAA5C,iBAFOO,EAAKP,kB,GAnEpBmB,IAAMC,WCGxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5212677a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from \"react-dom\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      newItem:\"\",\n      list: []\n    }\n  }\n\n\n  updateInput(key, value) {\n    //update react state\n    this.setState({\n      [key]: value\n    });\n  }\n  addItem() {\n    //create item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    };\n\n    //copy of current list of items\n    const list = [...this.state.list];\n\n    //add a new item to the list\n    list.push(newItem);\n\n    //update state with new list and reset newItem input\n    this.setState({\n      list,\n      newItem: \"\"\n    })\n  }\n  deleteItem(id) {\n    //copy current list of items\n    const list = [...this.state.list];\n\n    //filter out item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({list: updatedList});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n         <div>\n            Add an Item\n              <br/>\n              <input\n                type=\"text\"\n                placeholder=\"Type item here\"\n                value={this.state.newItem}\n                onChange={e => this.updateInput(\"newItem\", e.target.value)}\n                />\n                <button\n                  onClick={() => this.addItem()}\n                  >\n                    Add\n                  </button>\n                  <br/>\n                  <ul>\n                    {this.state.list.map(item => {\n                      return(\n                        <li key={item.id}>\n                          {item.value}\n                          <button onClick={() => this.deleteItem(item.id)}>\n                            X\n                          </button>\n                        </li>\n                      )\n                    })}\n                  </ul>\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}